using CustomerLedger.Data;
using CustomerLedger.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using static System.Runtime.InteropServices.JavaScript.JSType;
using System.Numerics;

namespace CustomerLedger.Controllers
{
    public class CustomerController : Controller
    {
        private readonly CustomerLedgerDbContext _context;
        private readonly IConfiguration _configuration;
        public CustomerController(CustomerLedgerDbContext context, IConfiguration configuration)
        {
            _context = context;
            _configuration = configuration;
        }
        //Customers List
        [HttpGet]
        public IActionResult Index()
        {
            var customers = _context.Customers
                .Select(c => new Customer
                {
                    Id = c.Id,
                    Name = c.Name,
                    Phone = c.Phone,
                    Email = c.Email,
                    Discordid = c.Discordid
                }).ToList();
            return View(customers);
        }

        //Customers Add
        // GET: Customer/Add
        [HttpGet]
        public IActionResult Add()
        {
            return View();
        }


        // POST: Customer/Add
        [HttpPost]
        public IActionResult Add(Customer customer)
        {
            try
            {
                // Add the customer to the database
                _context.Customers.Add(customer);
                var result = _context.SaveChanges();

                if (result > 0)
                {
                    // Log details if the customer was successfully added
                    var log = new Log
                    {
                        Action = $"Customer Added",
                        CustomerId = customer.Id, // Assuming Customer.Id is auto-generated by the database
                        Timestamp = DateTime.Now,
                        Details = $"Customer Added: Name = { customer.Name}, Phone = { customer.Phone}, Email = { customer.Email}, Discord ID = { customer.Discordid }",
                    };

                // Add the log entry to the context and save
                    _context.Logs.Add(log);
                    _context.SaveChanges();

                    return RedirectToAction("Index");
                }
            }
            catch (Exception ex)
            {
                // Log the exception if an error occurred
                var errorLog = new Log
                {
                    Action = "Error Adding Customer",
                    Timestamp = DateTime.Now,
                    Details = $"Customer Added: Name = {customer.Name}, Phone = {customer.Phone}, Email = {customer.Email}, Discord ID = {customer.Discordid}",
                };

                // Add the error log entry to the context and save
                _context.Logs.Add(errorLog);
                _context.SaveChanges();

                ModelState.AddModelError("", "حدث خطأ أثناء إضافة العميل.");
            }

            // Return to the view with the customer model if there was an error
            return View(customer);
        }



        //Customers Edit
        // GET: Customer/Edit/{id}
        [HttpGet]
        public IActionResult Edit(int id)
        {
            var customer = _context.Customers.FirstOrDefault(c => c.Id == id);
            if (customer == null)
            {
                return NotFound();
            }
            return View(customer);
        }

        // POST: Customer/Edit
        [HttpPost]
        public IActionResult Edit(Customer customer)
        {
                try
                {
                    // البحث عن العميل الموجود في قاعدة البيانات
                    var existingCustomer = _context.Customers.Find(customer.Id);
                    if (existingCustomer != null)
                    {
                        // إنشاء متغير لتخزين التعديلات
                        var changes = new List<string>();

                        // مقارنة القيم القديمة بالجديدة
                        if (existingCustomer.Name != customer.Name)
                        {
                            changes.Add($"Name changed from '{existingCustomer.Name}' to '{customer.Name}'");
                            existingCustomer.Name = customer.Name;
                        }

                        if (existingCustomer.Phone != customer.Phone)
                        {
                            changes.Add($"Phone changed from '{existingCustomer.Phone}' to '{customer.Phone}'");
                            existingCustomer.Phone = customer.Phone;
                        }

                        if (existingCustomer.Email != customer.Email)
                        {
                            changes.Add($"Email changed from '{existingCustomer.Email}' to '{customer.Email}'");
                            existingCustomer.Email = customer.Email;
                        }

                        if (existingCustomer.Discordid != customer.Discordid)
                        {
                            changes.Add($"Discord ID changed from '{existingCustomer.Discordid}' to '{customer.Discordid}'");
                            existingCustomer.Discordid = customer.Discordid;
                        }

                        // إذا كانت هناك تعديلات
                        if (changes.Count > 0)
                        {
                            // حفظ التغييرات في قاعدة البيانات
                            _context.Customers.Update(existingCustomer);
                            var result = _context.SaveChanges();

                            if (result > 0)
                            {
                                // إنشاء سجل جديد يتضمن التعديلات
                                var log = new Log
                                {
                                    Action = $"Customer Edit",
                                    CustomerId = customer.Id, // استخدام معرف العميل
                                    Timestamp = DateTime.Now,
                                     Details = $"Customer Edit Info: {string.Join(", ", changes)}",
                                };

                                // إضافة سجل التعديلات وحفظه في قاعدة البيانات
                                _context.Logs.Add(log);
                                _context.SaveChanges();

                                // إعادة التوجيه إلى صفحة الفهرس بعد النجاح
                                return RedirectToAction("Index");
                            }
                            else
                            {
                                ModelState.AddModelError("", "لم يتم تحديث العميل. حاول مرة أخرى.");
                            }
                        }
                        else
                        {
                            ModelState.AddModelError("", "لا توجد تغييرات لتحديثها.");
                        }
                    }
                    else
                    {
                        ModelState.AddModelError("", "العميل غير موجود.");
                    }
                }
                catch (Exception ex)
                {
                    ModelState.AddModelError("", "حدث خطأ أثناء تعديل العميل.");
                }
            
            // إذا كان النموذج غير صحيح أو حدث خطأ، العودة إلى صفحة التعديل مع نموذج البيانات
            return View(customer);
        }
        //Customers Delete
        // GET: Customer/Delete
        [HttpGet]
        public IActionResult Delete(int id)
        {
            var customer = _context.Customers.Find(id);
            if (customer == null)
            {
                return NotFound();
            }
            return View(customer);
        }

        // POST: Customer/Delete
        [HttpPost, ActionName("Delete")]
        public IActionResult DeleteConfirmed(int id)
        {
            // محاولة العثور على العميل باستخدام المعرف
            var customer = _context.Customers.Find(id);
            if (customer != null)
            {
                try
                {
                    // حذف العميل من قاعدة البيانات
                    _context.Customers.Remove(customer);
                    var result = _context.SaveChanges();

                        // إعادة التوجيه إلى صفحة الفهرس
                        return RedirectToAction("Index");
                    
                }
                catch (Exception ex)
                {
                    // يمكنك تسجيل الاستثناء هنا إذا لزم الأمر
                    ModelState.AddModelError("", "حدث خطأ أثناء حذف العميل.");
                }
            }

            // إذا لم يتم العثور على العميل، إرجاع خطأ "لم يتم العثور على المورد"
            return NotFound();
        }

        //Customers Logs
        // GET: Customer/Logs/{id}
        [HttpGet]
        public IActionResult Logs(int id)
        {
            // Fetch the customer and their associated logs from the database
            var customer = _context.Customers
                .Include(c => c.Logs) // Assuming Logs is a navigation property in Customer
                .FirstOrDefault(c => c.Id == id);

            // Check if customer exists
            if (customer == null)
            {
                return NotFound();
            }

            // Pass the customer with their logs to the view
            return View(customer);
        }

    }
}
